\documentclass[12pt,a4paper]{report}
\usepackage{graphicx}
\usepackage{tabularx}
\usepackage{array}

\begin{document}
%--------------Title Page ------------------
\thispagestyle{empty}
\begin{center}
\textbf{\large{Merchant Monetary System}}\\
\vspace{0.5cm}
\textbf{ Data Structure} \\
\vspace{1.5cm}
\includegraphics[scale=.07]{UETLogo}\\
\vspace{1.5cm}
\underline{ Project Supervisor}\\
\vspace{0.5cm}
Mr. Samyan Qayyum Wahla\\
\vspace{1cm}
\underline {Group ID $(G 11)$} \\
\vspace{0.5cm}
Project Member\\
\vspace{0.5cm}
\begin{tabular}{ m{5cm} m{4cm}}
 Syed Hashir & 2021-CS-1 \\ 
 Kabir Ahmed & 2021-CS-4  \\  
 M. Hamad Hassan & 2021-CS-33
\end{tabular}
\vspace{2cm}
\par\rule{\textwidth}{0.5pt} 
Department of Computer Science\\
University of Engineering and Technology, Lahore\\
Pakistan
\end{center}
\newpage
%----------------Data Structure-----------
\chapter*{Data Strucuture}
The following section shows the reason for choosing the data structure in the particular use case with a brief explanation.
%-------------------------------------------------------
\begin{center}
\begin{tabular}{ | m{4cm}|m{12cm}| }\hline
\textbf{Use Case ID}& U01,U02,U03,U04,U05,U06,U07,U08,U09,U010,U11,U12,U13,U14,
U15,U16,U17,U18,U21,U22,U23,U24,U25,U26,U30,U31 \\ \hline
\textbf{Data Structure Used}& Linked List \\ \hline

\textbf{Time Complexity}& 
In Worst Case: Search: O(n), Insertion: O(1), Deletion: O(n)\\\hline
\textbf{Space Complexity}& O(n)\\\hline

\textbf{Pseudocode}& 
\textbf{Search:} \\&
LIST-SEARCH(L,k)\\&
1 x=L.head\\&
2 while x $\neq$ NIL and x:key $\neq$ k \\&
3\hspace{6 mm} x = x.next\\&
4 return x\\&
\textbf{Insert:} \\&
LIST-INSERT(L, x) \\&
1 x.next=L.head \\&
2 if L.head $\neq$ NIL \\&
3\hspace{6 mm} L.head.pre = x \\&
4 L.head = x \\&
5 x.pre = NIL \\&
\textbf{Delete:} \\&
LIST-DELETE(L,x)\\&
1 if x.pre $\neq$ NIL\\&
2\hspace{6 mm} x.pre.next=x.next\\&
3 else L.head D x.next\\&
4 if x.next $\neq$ NIL\\&
5\hspace{6 mm} x.next.pre =x.pre
 \\ \hline
 \end{tabular}
\begin{tabular}{ | m{4cm}|m{12cm}| }\hline
\textbf{Justification for the use of data structure}&
In mentioned use case required a linear-dynamic data structure. 
Doubly LinkedList provides an efficient way to search the specific information from a large amount of data and then compare it with input information to produce the required result. It allows you to move back and forth in the list to get the required result.
 
 \\ \hline
\textbf{Available choices}& Array List,Hash Table \\ \hline
\textbf{Comparison}&
The array list worst and average case time complexity is O(n). It takes contiguous memory. The hash table is best in the average case, but in the worst case time, complexity rise to O(n). It takes contiguous memory for storing the hash function value. In the average and worst case, the linked list insertion and deletion take O(1) time. In the average and worst case, it takes O(n) time for deletion. It did not require contiguous memory allocation.Array list, hash table, and linked list space complexity O(n) are the same.
 \\ \hline
\end{tabular}
\end{center}
%-------------------------------------------------------
\section{Use Case 2:Forget Password}
\begin{center}
\begin{tabular}{ | m{4cm}|m{12cm}| }\hline
\textbf{Use Case ID}& U02 \\ \hline
\textbf{Data Structure Used}& Linked List \\ \hline

\textbf{Time Complexity}& 
In Worst Case: Search: O(n), Insertion: O(1), Deletion: O(n)\\\hline
\textbf{Space Complexity}& O(n)\\\hline

\textbf{Pseudocode}& 
\textbf{Search:} \\&
LIST-SEARCH(L,k)\\&
1 x=L.head\\&
2 while x $\neq$ NIL and x:key $\neq$ k \\&
3\hspace{6 mm} x = x.next\\&
4 return x\\&
\textbf{Insert:} \\&
LIST-INSERT(L, x) \\&
1 x.next=L.head \\&
2 if L.head $\neq$ NIL \\&
3\hspace{6 mm} L.head.pre = x \\&
4 L.head = x \\&
5 x.pre = NIL \\
\hline
 \end{tabular}
\begin{tabular}{ | m{4cm}|m{12cm}| }\hline
\textbf{Pseudocode}&
\textbf{Delete:} \\&
LIST-DELETE(L,x)\\&
1 if x.pre $\neq$ NIL\\&
2\hspace{6 mm} x.pre.next=x.next\\&
3 else L.head D x.next\\&
4 if x.next $\neq$ NIL\\&
5\hspace{6 mm} x.next.pre =x.pre
 \\ \hline

\textbf{Justification for the use of data structure}&
In mentioned use case required a linear-dynamic data structure. 
Doubly LinkedList provides an efficient way to search the specific information from a large amount of data and then compare it with input information to produce the required result. It allows you to move back and forth in the list to get the required result.
 \\ \hline
\textbf{Available choices}& Array List,Hash Table \\ \hline
\textbf{Comparison}&
The array list worst and average case time complexity is O(n). It takes contiguous memory. The hash table is best in the average case, but in the worst case time, complexity rise to O(n). It takes contiguous memory for storing the hash function value. In the average and worst case, the linked list insertion and deletion take O(1) time. In the average and worst case, it takes O(n) time for deletion. It did not require contiguous memory allocation.Array list, hash table, and linked list space complexity O(n) are the same.
 \\ \hline
\end{tabular}
\end{center}

















\end{document}